#include <stdio.h>

int main() {
    int n, i, time = 0, count = 0;
    int qt; // quantum time
    int at[10], bt[10], rt[10], ct[10], tat[10], wt[10];
    int done[10] = {0};

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for(i = 0; i < n; i++) {
        printf("Enter Arrival Time and Burst Time for process %d: ", i+1);
        scanf("%d %d", &at[i], &bt[i]);
        rt[i] = bt[i]; // remaining time initially = burst time
    }

    printf("Enter Time Quantum: ");
    scanf("%d", &qt);

    while(count < n) {
        int done_in_this_cycle = 0;

        for(i = 0; i < n; i++) {
            if(rt[i] > 0 && at[i] <= time) {
                if(rt[i] <= qt) {
                    time += rt[i];
                    rt[i] = 0;
                    ct[i] = time;
                    count++;
                } else {
                    time += qt;
                    rt[i] -= qt;
                }
                done_in_this_cycle = 1;
            }
        }

        if(!done_in_this_cycle) {
            time++; // if no process executed, increment time (idle CPU)
        }
    }

    for(i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];
    }

    printf("\nRound Robin Scheduling:\n");
    printf("P#\tAT\tBT\tCT\tTAT\tWT\n");
    for(i = 0; i < n; i++)
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", i+1, at[i], bt[i], ct[i], tat[i], wt[i]);

    return 0;
}
