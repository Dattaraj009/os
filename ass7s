#include <stdio.h>
#include <stdbool.h>

int main() {
    int n, m, i, j;
    
    // Input number of processes and resources
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resource types: ");
    scanf("%d", &m);

    int alloc[n][m], max[n][m], avail[m], need[n][m];
    bool finish[n];
    
    // Input Allocation matrix
    printf("Enter Allocation matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    // Input Maximum matrix
    printf("Enter Maximum matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Input Available resources
    printf("Enter Available resources:\n");
    for (j = 0; j < m; j++) {
        scanf("%d", &avail[j]);
    }

    // Calculate Need matrix = max - alloc
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    // Initialize finish array
    for (i = 0; i < n; i++) {
        finish[i] = false;
    }

    int work[m];
    for (j = 0; j < m; j++) {
        work[j] = avail[j];
    }

    int count = 0;
    int safeSeq[n];

    while (count < n) {
        bool found = false;

        for (i = 0; i < n; i++) {
            if (!finish[i]) {
                bool canFinish = true;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        canFinish = false;
                        break;
                    }
                }
                if (canFinish) {
                    for (j = 0; j < m; j++) {
                        work[j] += alloc[i][j];
                    }
                    safeSeq[count++] = i;
                    finish[i] = true;
                    found = true;
                }
            }
        }

        if (!found) {
            break;
        }
    }

    if (count == n) {
        printf("System is in a SAFE state.\nSafe sequence is: ");
        for (i = 0; i < n; i++) {
            printf("P%d ", safeSeq[i]);
        }
        printf("\n");
    } else {
        printf("System is NOT in a safe state.\n");
    }

    return 0;
}
